<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>K&#39;s 个人博客 2.0</title>
  
  <subtitle>靡不有初，鲜克有终</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-09-20T10:00:29.593Z</updated>
  <id>/</id>
  
  <author>
    <name>Bro.K</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mock在vue项目中的使用</title>
    <link href="/2019/09/18/The-method-to-use-of-mock-in-vue/"/>
    <id>/2019/09/18/The-method-to-use-of-mock-in-vue/</id>
    <published>2019-09-18T03:27:05.000Z</published>
    <updated>2019-09-20T10:00:29.593Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;作为一个前后端分离的vue开发者，在后台接口和数据都没有的情况下想保证进度过着自测页面功能是一件比较苦恼的事情，当然可以在 *.vue文件的data中自行输入想要的JSON数据，但这样的情况过于麻烦，如果一个复杂的JSON需要改动，工作量和时间消耗是很高的，所以我们需要借用一个能够按自动生成符合你所定义规则的数据的插件或框架。本文将介绍mock.js，一个能够拦截ajax请求并生成随机数据的框架。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue组件化开发" scheme="/categories/vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="vue组件化开发" scheme="/tags/vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
      <category term="前端假数据自测" scheme="/tags/%E5%89%8D%E7%AB%AF%E5%81%87%E6%95%B0%E6%8D%AE%E8%87%AA%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/09/18/hello-world/"/>
    <id>/2019/09/18/hello-world/</id>
    <published>2019-09-18T03:23:22.467Z</published>
    <updated>2019-09-18T03:23:22.467Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a
        
      
    
    </summary>
    
    
      <category term="测试文章" scheme="/categories/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>elementUI各个组件在具体使用中的问题</title>
    <link href="/2019/09/10/elementUI%E5%90%84%E4%B8%AA%E7%BB%84%E4%BB%B6%E5%9C%A8%E5%85%B7%E4%BD%93%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>/2019/09/10/elementUI各个组件在具体使用中的问题/</id>
    <published>2019-09-10T14:49:45.000Z</published>
    <updated>2019-09-17T09:06:20.485Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、elementUI-时间控件表单验证方法&quot;&gt;&lt;a href=&quot;#一、elementUI-时间控件表单验证方法&quot; class=&quot;headerlink&quot; title=&quot;一、elementUI 时间控件表单验证方法&quot;&gt;&lt;/a&gt;一、elementUI 时间控件表单验证方法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;elementUI中的日期时间控件是挺不错的，日期选择的逻辑也还比较符合人们的正常习惯，但是该控件是一个标签生成两个input框的，在表单验证中无法使用required来验证是否非空。本篇文章是我采取的解决方法，也奏效了。可以作为参考。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="vue组件化开发" scheme="/categories/vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="vue组件化开发" scheme="/tags/vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
      <category term="elementUI" scheme="/tags/elementUI/"/>
    
  </entry>
  
  <entry>
    <title>多个axios如何进行同步请求</title>
    <link href="/2019/09/10/%E5%A4%9A%E4%B8%AAaxios%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%90%8C%E6%AD%A5%E8%AF%B7%E6%B1%82/"/>
    <id>/2019/09/10/多个axios如何进行同步请求/</id>
    <published>2019-09-10T09:52:12.000Z</published>
    <updated>2019-09-17T09:17:33.014Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;多个axios如何进行同步请求&quot;&gt;&lt;a href=&quot;#多个axios如何进行同步请求&quot; class=&quot;headerlink&quot; title=&quot;多个axios如何进行同步请求&quot;&gt;&lt;/a&gt;多个axios如何进行同步请求&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在我使用vue+axios进行开发的过程中，会碰到有两个异步请求，且其中一个请求需要另一个请求的返回值，那此时将两个异步的axios请求同步执行才是最好的方式。本文中整理了两种axios同步请求的方式。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="vue组件化开发" scheme="/categories/vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="vue组件化开发" scheme="/tags/vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
      <category term="axios" scheme="/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>js中变量的深浅拷贝</title>
    <link href="/2019/09/09/copy/"/>
    <id>/2019/09/09/copy/</id>
    <published>2019-09-09T13:59:59.000Z</published>
    <updated>2019-09-10T10:17:06.756Z</updated>
    
    <summary type="html">
    
      &lt;!--&lt;img src=&quot;../../../about_old.jpg&quot; width=&quot;800px&quot;&gt;--&gt;

&lt;!----&gt;

&lt;h2 id=&quot;js中-对象和数组的深浅拷贝&quot;&gt;&lt;a href=&quot;#js中-对象和数组的深浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;js中 对象和数组的深浅拷贝&quot;&gt;&lt;/a&gt;js中 对象和数组的深浅拷贝&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一般我们在将值从一个基本数据类型的变量赋值给另一个基本数据类型的变量时，简单的赋值即可实现，如：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;var a = 1;
var b = a;  // b:1   简单赋值
b = 2；      //a:1,b:2   即使改变b的值，也不会影响a&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;这个简单的例子证明了基本数据类型的变量只需要简单赋值即可。但是在给对象和数组赋值的时候这种方法就不可行了，涉及到了深浅拷贝的问题，下面会介绍到。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="js基础" scheme="/categories/js%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="js基础" scheme="/tags/js%E5%9F%BA%E7%A1%80/"/>
    
      <category term="深浅拷贝" scheme="/tags/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>Js对数组的一些操作方法</title>
    <link href="/2019/09/05/Js%20Array%20and%20String/"/>
    <id>/2019/09/05/Js Array and String/</id>
    <published>2019-09-05T14:57:53.000Z</published>
    <updated>2019-09-18T03:19:32.802Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要介绍js中对数组和字符串的基本操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一-数组操作&quot;&gt;&lt;a href=&quot;#一-数组操作&quot; class=&quot;headerlink&quot; title=&quot;一. 数组操作&quot;&gt;&lt;/a&gt;一. 数组操作&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;  概念&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数组操作分为两类:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;会改变原数组的方法: .push(), .pop(), .shift(), .unshift(), .splice(), .reverse(), .sort();&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不会改变原数组的方法: .concat(), .slice()。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;1）改变原数组的操作&quot;&gt;&lt;a href=&quot;#1）改变原数组的操作&quot; class=&quot;headerlink&quot; title=&quot;1）改变原数组的操作&quot;&gt;&lt;/a&gt;1）改变原数组的操作&lt;/h2&gt;&lt;h3 id=&quot;push&quot;&gt;&lt;a href=&quot;#push&quot; class=&quot;headerlink&quot; title=&quot;push()&quot;&gt;&lt;/a&gt;push()&lt;/h3&gt;&lt;p&gt;push()方法可向数组的末尾添加一个或多个元素，并返回新的长度。&lt;/p&gt;
&lt;h4 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr.push([&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]);  &lt;span class=&quot;comment&quot;&gt;//arr:[1,2,3,4,5,6,[7,8]]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;comment&quot;&gt;//如果插入的为数组，则插入的这个数组成为arr的最后一项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; count = arr.push(&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);   &lt;span class=&quot;comment&quot;&gt;//arr:[1,2,3,4,5,6,[7,8],9,10]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              &lt;span class=&quot;comment&quot;&gt;//count:9  ==  返回值为改变后数组的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js基础" scheme="/categories/js%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="js基础" scheme="/tags/js%E5%9F%BA%E7%A1%80/"/>
    
      <category term="js数组" scheme="/tags/js%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>my first article</title>
    <link href="/2019/09/04/my-first-article/"/>
    <id>/2019/09/04/my-first-article/</id>
    <published>2019-09-04T14:43:21.000Z</published>
    <updated>2019-09-18T03:23:26.802Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;lalalalalalal&lt;/p&gt;
&lt;h1 id=&quot;这是一级标题&quot;&gt;&lt;a href=&quot;#这是一级标题&quot; class=&quot;headerlink&quot; title=&quot;这是一级标题&quot;&gt;&lt;/a&gt;这是一级标题&lt;/h1&gt;&lt;h2 id=&quot;这是二级标题&quot;&gt;&lt;a href=&quot;#这是二级标题&quot; class=&quot;headerlink&quot; title=&quot;这是二级标题&quot;&gt;&lt;/a&gt;这是二级标题&lt;/h2&gt;&lt;h3 id=&quot;这是三级标题&quot;&gt;&lt;a href=&quot;#这是三级标题&quot; class=&quot;headerlink&quot; title=&quot;这是三级标题&quot;&gt;&lt;/a&gt;这是三级标题&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;感谢人生中每一位老师&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;strong&gt;这是粗体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 这不是粗体&lt;/p&gt;
&lt;p&gt;  &lt;a href=&quot;https://www.baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;百度&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;del&gt;短发短发短发&lt;/del&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.baidu.com&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我从来不梦想，我只是在努力认识现实；戏剧家洪深说：我的梦想是明年吃苦的能力比今年更强；鲁迅说：人生最大的痛苦是梦醒了无路可走；苏格拉底说：人类的幸福和欢乐在于奋斗，而最有价值的是为了理想而奋斗&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="测试文章" scheme="/categories/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
</feed>
