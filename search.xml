<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js运行机制</title>
      <link href="/2019/09/25/js%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/09/25/js%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>以下是主线程和任务队列的关系示意图：</strong></p><div id="flowchart-0" class="flow-chart"></div><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 主线程上的同步任务执行栈执行完成op=>operation: 检查任务队列中的事件op1=>operation: 执行任务队列中的事件cond=>condition: 任务队列中是否存在事件？sub1=>subroutine: 事件队列st->op->cond(no)->op1->opcond(yes)->opop<->sub1</-></textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
      
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue父子组件之间传值</title>
      <link href="/2019/09/23/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%80%BC/"/>
      <url>/2019/09/23/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="vue父子组件之间传值"><a href="#vue父子组件之间传值" class="headerlink" title="vue父子组件之间传值"></a>vue父子组件之间传值</h1><p>在个人的vue项目实际开发中，不会常遇到父子组件传值的情况，即使涉及到也会使用vuex或者webStorage来解决。但当随着工作不断深入和开展，普通的vue项目书写方式不足以应对稍大型的或者有许多复用型组件的项目，编写一个vue组件库成了当下或者日后的一个比较好的选择，尤其是UI组件。但是编写vue组件库的基本功就是基于父子组件传值来进行开发的。</p><blockquote><p>vue组件之间传值只可由父传向子，不能由子传向父。</p></blockquote><a id="more"></a><p>父子组件传值的形式如下。</p><p>在vue项目中新建两个.vue文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 此为父组件的写法 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 此处使用“：(v-on)”方式绑定的为传到子组件的值，“@(v-bind)”方式绑定的为传到子组件并可供其调用的方法。 --&gt;</span><br><span class="line">    &lt;child :childData = &quot;fatherData&quot; @changeData = &quot;changeData&quot;&gt;&lt;/child&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            fatherData:&apos;word&apos;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        changeData(str)&#123;</span><br><span class="line">            this.fatherData = str;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>另一个vue文件用来写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 此为子组件的写法 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;&#123; cData &#125;&#125;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;button @click = &quot;setData&quot;&gt;change data to &quot;Hello World!&quot;&lt;button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/tamplate&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    props:[&apos;childData&apos;],</span><br><span class="line">    computed:&#123;</span><br><span class="line">    /* 此处可以不声明，this.childData也可直接获传父组件来的值，只不过再有这样一层计算属性的包装可以省去对子组件中用来接收父组件值的变量的修改。*/</span><br><span class="line">        cData()&#123;</span><br><span class="line">            return childData;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">    /* 此方法为子组件中声明的方法，再调用vue定义的$emit即可调用父组件传过来的方法。 */</span><br><span class="line">        setData()&#123;</span><br><span class="line">            this.$emit(&apos;changeData&apos;,&apos;Hello World!&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="子组件调用父组件方法以传值或操作父组件变量。"><a href="#子组件调用父组件方法以传值或操作父组件变量。" class="headerlink" title="子组件调用父组件方法以传值或操作父组件变量。"></a>子组件调用父组件方法以传值或操作父组件变量。</h4><p>其中子组件中的setData()方法调用的就是父组件中的changeData()方法。在子组件调用父组件方法的写法为：<code>this.$emit([functionName],[params])</code>。</p><p>父组件的值在子组件可以显示但不能做更改，但是借由<code>this.$emit</code>就可以达到操作父元素变量的操作，或者传值到父组件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue组件化开发 </tag>
            
            <tag> vue组件传值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router路由传参</title>
      <link href="/2019/09/23/vue-router%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82/"/>
      <url>/2019/09/23/vue-router%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-router路由传参"><a href="#vue-router路由传参" class="headerlink" title="vue-router路由传参"></a>vue-router路由传参</h1><blockquote><p><code>*tip</code>:在vue项目中，有时会有出现 连续路由都用到同一或同一些数据的情况出现，此时使用vue-router进行传参是可行的。</p></blockquote><p>vue-router传参的方式分为两种：</p><ul><li>params传参：参数透明，但刷新页面会丢失数据。</li><li>query传参：参数在url之后，但刷新页面不会丢失数据。</li></ul><a id="more"></a><h2 id="1、配置router-js"><a href="#1、配置router-js" class="headerlink" title="1、配置router.js"></a>1、配置router.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">export default new Router(&#123;</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:&apos;/pageFrom&apos;,</span><br><span class="line">            name:&apos;pageFrom&apos;,</span><br><span class="line">            component:()=&gt;import ...</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:&apos;/pageTO&apos;,</span><br><span class="line">            name:&apos;pageTo&apos;,</span><br><span class="line">            component:()=&gt;import ...</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h2><h3 id="1）params传参"><a href="#1）params传参" class="headerlink" title="1）params传参"></a>1）params传参</h3><p>传递参数：使用<code>$router</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- pageFrom 页面 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button @click=&quot;&quot;&gt;Go next page&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        goNextPage()&#123;</span><br><span class="line">            /**</span><br><span class="line">            *使用params传参时，push()方法传的是路由的name而不是path。</span><br><span class="line">            *params 对象用材存放需要传的值。</span><br><span class="line">            *params 对象中的数据是透明的，但是在刷新页面后数据会丢失。</span><br><span class="line">            */</span><br><span class="line">            this.$router.push(&#123;</span><br><span class="line">                name:&quot;pageTo&quot;,</span><br><span class="line">                params:&#123;</span><br><span class="line">                    id:1,</span><br><span class="line">                    name:&quot;Abbott&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>接收参数：使用<code>$route</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- pageTo 页面 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            id:&quot;&quot;,</span><br><span class="line">            name:&quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        getData()&#123;</span><br><span class="line">            /**</span><br><span class="line">            *接收params传参时，传递的参数全部储存在this.$toute.params中</span><br><span class="line">            *直接使用传过来的参数名获取值</span><br><span class="line">            */</span><br><span class="line">            this.id = this.$route.params.id;</span><br><span class="line">            this.name = this.$route.params.name;</span><br><span class="line">            </span><br><span class="line">            console.log(`id:$&#123; this.id &#125;`);</span><br><span class="line">            // =&gt; 1</span><br><span class="line">            console.log(`name:$&#123; this.name &#125;`);</span><br><span class="line">            // =&gt; &apos;Abbott&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">        this.getData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2）query传参"><a href="#2）query传参" class="headerlink" title="2）query传参"></a>2）query传参</h3><p>传递参数：使用<code>$router</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- pageFrom 页面 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button @click=&quot;&quot;&gt;Go next page&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        goNextPage()&#123;</span><br><span class="line">            /**</span><br><span class="line">            *使用query传参时，push()方法传的可以是路由的name或者path。</span><br><span class="line">            *query 对象用材存放需要传的值。</span><br><span class="line">            *query 对象中的数据不是透明的，会在url之后存放，而且刷新页面不会丢失数据，仍可获取到。</span><br><span class="line">            */</span><br><span class="line">            this.$router.push(&#123;</span><br><span class="line">                name:&quot;pageTo&quot;,</span><br><span class="line">                query:&#123;</span><br><span class="line">                    id:1,</span><br><span class="line">                    name:&quot;Abbott&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>接收参数：使用<code>$route</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- pageTo 页面 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            id:&quot;&quot;,</span><br><span class="line">            name:&quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        getData()&#123;</span><br><span class="line">            /**</span><br><span class="line">            *接收query传参时，传递的参数全部储存在this.$toute.query中</span><br><span class="line">            *直接使用传过来的参数名获取值</span><br><span class="line">            */</span><br><span class="line">            this.id = this.$route.query.id;</span><br><span class="line">            this.name = this.$route.query.name;</span><br><span class="line">            </span><br><span class="line">            console.log(`id:$&#123; this.id &#125;`);</span><br><span class="line">            // =&gt; 1</span><br><span class="line">            console.log(`name:$&#123; this.name &#125;`);</span><br><span class="line">            // =&gt; &apos;Abbott&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">        this.getData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>总结一下</strong></p><p>  params方式传参数据透明，有一定安全性但是在刷新页面后数据会丢失；</p><p>  query方式传参数据不透明，数据跟在url之后，会有一定安全风险但是在刷新页面之后数据不会丢失。</p>]]></content>
      
      
      <categories>
          
          <category> vue组件化开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue组件化开发 </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遍历Object的几种方法</title>
      <link href="/2019/09/22/%E9%81%8D%E5%8E%86Object%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2019/09/22/%E9%81%8D%E5%8E%86Object%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="js遍历Object的几种方法"><a href="#js遍历Object的几种方法" class="headerlink" title="js遍历Object的几种方法"></a>js遍历Object的几种方法</h1><h2 id="1-for……in"><a href="#1-for……in" class="headerlink" title="1. for……in"></a>1. for……in</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123;</span><br><span class="line">    id:1,</span><br><span class="line">    name:&apos;Abbott&apos;,</span><br><span class="line">    age:18</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">for(let key in obj)&#123;</span><br><span class="line">    console.log(`$&#123;key&#125; --- $&#123;obj[key]&#125;`);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>输出结果为： </p><pre><code>id --- 1  name --- Abbottage --- 18</code></pre><a id="more"></a><h2 id="2-Object-keys-obj-amp-Object-values-obj"><a href="#2-Object-keys-obj-amp-Object-values-obj" class="headerlink" title="2. Object.keys(obj) &amp; Object.values(obj)"></a>2. Object.keys(obj) &amp; Object.values(obj)</h2><p>参数：</p><p>obj为将要遍历其可枚举属性并返回数组的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123;</span><br><span class="line">    id:1,</span><br><span class="line">    name:&apos;Abbott&apos;,</span><br><span class="line">    age:18</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(Object.keys(obj));</span><br><span class="line">console.log(Object.values(obj));</span><br></pre></td></tr></table></figure><p>输出结果：</p><pre><code>//obj的key组成的数组[&quot;id&quot;,&quot;name&quot;,&quot;age&quot;];//obj的value组成的数组[&quot;1&quot;,&quot;Abbott&quot;,&quot;18&quot;];</code></pre><h2 id="3-Object-getOwnPropertyNames-obj"><a href="#3-Object-getOwnPropertyNames-obj" class="headerlink" title="3. Object.getOwnPropertyNames(obj)"></a>3. Object.getOwnPropertyNames(obj)</h2><p>返回一个数组，包括obj中所有属性，包括不可枚举的。</p><p>遍历Object.getOwnPropertyNames(obj)的返回值可获得key、value。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123; </span><br><span class="line">    id:1, </span><br><span class="line">    name:&apos;zhangsan&apos;, </span><br><span class="line">    age:18 </span><br><span class="line">&#125;;</span><br><span class="line">Object.getOwnPropertyNames(obj).forEach(function(key)&#123; </span><br><span class="line">    console.log(key+&apos;---&apos;+obj[key]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>输出结果：</p><pre><code>id --- 1  name --- Abbottage --- 18</code></pre>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
            <tag> js遍历Object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mock在vue项目中的使用</title>
      <link href="/2019/09/18/The-method-to-use-of-mock-in-vue/"/>
      <url>/2019/09/18/The-method-to-use-of-mock-in-vue/</url>
      
        <content type="html"><![CDATA[<p>作为一个前后端分离的vue开发者，在后台接口和数据都没有的情况下想保证进度过着自测页面功能是一件比较苦恼的事情，当然可以在 *.vue文件的data中自行输入想要的JSON数据，但这样的情况过于麻烦，如果一个复杂的JSON需要改动，工作量和时间消耗是很高的，所以我们需要借用一个能够按自动生成符合你所定义规则的数据的插件或框架。本文将介绍mock.js，一个能够拦截ajax请求并生成随机数据的框架。</p><a id="more"></a><h1 id="一、安装及使用"><a href="#一、安装及使用" class="headerlink" title="一、安装及使用"></a>一、安装及使用</h1><h3 id="1-mock安装"><a href="#1-mock安装" class="headerlink" title="1. mock安装"></a>1. mock安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mockjs</span><br></pre></td></tr></table></figure><p>使用时在需要使用mock生成随机数据的文件中使用RequireJS或者import的方式引入mock。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import Mock from &apos;mockjs&apos;;</span><br><span class="line"></span><br><span class="line">var Mock = require(&apos;mockjs&apos;);</span><br></pre></td></tr></table></figure><p> 之后便可以在文件中使用Mock.mock()的方式生成数据。</p><h3 id="2-mock的使用"><a href="#2-mock的使用" class="headerlink" title="2. mock的使用"></a>2. mock的使用</h3><p>使用vue-cli脚手架搭建完项目并引入mockjs依赖之后。在vue项目中直接新建一个名为mock的文件夹（不一定要创建mock文件夹，只要创建一个js文件并引入mockjs即可，放在mock文件夹下只是为了方便管理）。</p><p>例如现在新建了一个mock文件夹并在mock目录中新建一个user.js文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vue-project</span><br><span class="line">|</span><br><span class="line">+-- mock</span><br><span class="line">|   +</span><br><span class="line">|   +-- user.js</span><br></pre></td></tr></table></figure><p>在user.js中输入以下demo代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import Mock from &apos;mockjs&apos;  //引入mockjs</span><br><span class="line"></span><br><span class="line">const Random = Mock.Random;    //引入Random，Random用来生成随机数据</span><br><span class="line"></span><br><span class="line">const data = Mock.mock(&#123;     //template 模版规则</span><br><span class="line">    &apos;items|30&apos;: [&#123;</span><br><span class="line">    id: &apos;@id&apos;,</span><br><span class="line">    title: &apos;@sentence(10, 20)&apos;,</span><br><span class="line">    &apos;status|1&apos;: [&apos;published&apos;, &apos;draft&apos;, &apos;deleted&apos;],</span><br><span class="line">    author: &apos;name&apos;,</span><br><span class="line">    display_time: &apos;@datetime&apos;,</span><br><span class="line">    pageviews: &apos;@integer(300, 5000)&apos;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default [</span><br><span class="line">    //get table list</span><br><span class="line">    &#123;</span><br><span class="line">        url: &apos;/table/list&apos;,</span><br><span class="line">        type: &apos;get&apos;,</span><br><span class="line">        response: config =&gt; &#123;</span><br><span class="line">        const items = data.items</span><br><span class="line">        return &#123;</span><br><span class="line">            code: 1000,</span><br><span class="line">            data: &#123;</span><br><span class="line">            total: items.length,</span><br><span class="line">            items: items</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、Mock-mock-template"><a href="#二、Mock-mock-template" class="headerlink" title="二、Mock.mock(template)"></a>二、Mock.mock(template)</h1><blockquote><p>根据数据模版生成模拟数据。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const data = Mock.mock(template);  //其中template处填写的数据规则在下一节 Mock.Random中讲解</span><br></pre></td></tr></table></figure><h1 id="三、Mock-Random"><a href="#三、Mock-Random" class="headerlink" title="三、Mock.Random"></a>三、Mock.Random</h1><blockquote><p>Mock.Random 是一个工具类，用于生成各种数据。</p></blockquote><p>Mock.Random中的方法在数据模版中被称为占位符，可简写为@占位符（参数），如下例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var Random = Mock.Random;</span><br><span class="line">Random.email();</span><br><span class="line">// =&gt; &quot;n.clark@miller.io&quot;</span><br><span class="line">Mock.mock(&apos;@email&apos;);</span><br><span class="line">// =&gt; &quot;y.lee@lewis.org&quot;</span><br><span class="line">Mock.mock( &#123; email: &apos;@email&apos; &#125; );</span><br><span class="line">// =&gt; &#123; email: &quot;v.lewis@hall.gov&quot; &#125;</span><br></pre></td></tr></table></figure><blockquote><p>接下来介绍详细的RanDom的用法:</p></blockquote><h2 id="1-Date"><a href="#1-Date" class="headerlink" title="1) Date"></a>1) Date</h2><h3 id="1-Random-date-format"><a href="#1-Random-date-format" class="headerlink" title="1. Random.date([format])"></a>1. Random.date([format])</h3><p>返回一个随机的日期字符串.</p><h5 id="format"><a href="#format" class="headerlink" title="format"></a>format</h5><p>可选属性。</p><p>表示生成的日期字符串的格式。默认值为<code>yyy-MM-dd</code>。</p><table><thead><tr><th>Format</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>yyyy</td><td>A full numeric representation of a year, 4 digits</td><td>1999 or 2003</td></tr><tr><td>yy</td><td>A two digit representation of a year</td><td>99 or 03</td></tr><tr><td>y</td><td>A two digit representation of a year</td><td>99 or 03</td></tr><tr><td>MM</td><td>Numeric representation of a month, with leading zeros</td><td>01 to 12</td></tr><tr><td>M</td><td>Numeric representation of a month, without leading zeros</td><td>1 to 12</td></tr><tr><td>dd</td><td>Day of the month, 2 digits with leading zeros</td><td>01 to 31</td></tr><tr><td>d</td><td>Day of the month without leading zeros</td><td>1 to 31</td></tr><tr><td>HH</td><td>24-hour format of an hour with leading zeros</td><td>00 to 23</td></tr><tr><td>H</td><td>24-hour format of an hour without leading zeros</td><td>0 to 23</td></tr><tr><td>hh</td><td>12-hour format of an hour without leading zeros</td><td>1 to 12</td></tr><tr><td>h</td><td>12-hour format of an hour with leading zeros</td><td>01 to 12</td></tr><tr><td>mm</td><td>Minutes, with leading zeros</td><td>00 to 59</td></tr><tr><td>m</td><td>Minutes, without leading zeros</td><td>0 to 59</td></tr><tr><td>ss</td><td>Seconds, with leading zeros</td><td>00 to 59</td></tr><tr><td>s</td><td>Seconds, without leading zeros</td><td>0 to 59</td></tr><tr><td>SS</td><td>Milliseconds, with leading zeros</td><td>000 to 999</td></tr><tr><td>S</td><td>Milliseconds, without leading zeros</td><td>0 to 999</td></tr><tr><td>A</td><td>Uppercase Ante meridiem and Post meridiem</td><td>AM or PM</td></tr><tr><td>a</td><td>Lowercase Ante meridiem and Post meridiem</td><td>am or pm</td></tr><tr><td>T</td><td>Milliseconds, since 1970-1-1 00:00:00 UTC</td><td>759883437303</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Random.extend(&#123;</span><br><span class="line">    season: function(date) &#123;</span><br><span class="line">        var seasons = [&apos;春&apos;, &apos;夏&apos;, &apos;秋&apos;, &apos;冬&apos;]</span><br><span class="line">        return this.pick(seasons)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Random.season();</span><br><span class="line">// =&gt; &quot;春&quot;</span><br><span class="line">Mock.mock(&apos;@SEASON&apos;);</span><br><span class="line">// =&gt; &quot;冬&quot;</span><br><span class="line">Mock.mock(&#123;</span><br><span class="line">    season: &apos;@SEANSON&apos;;</span><br><span class="line">&#125;);</span><br><span class="line">// =&gt; &#123; season: &quot;秋&quot; &#125;</span><br></pre></td></tr></table></figure><h3 id="2-Random-time-format"><a href="#2-Random-time-format" class="headerlink" title="2. Random.time([format])"></a>2. Random.time([format])</h3><p>返回一个随机的时间字符串。</p><h5 id="format-1"><a href="#format-1" class="headerlink" title="format"></a>format</h5><p>可选属性。</p><p>表示生成的时间字符串的格式。默认为<code>HH:mm:ss</code>。</p><p>详见Random.date([format])。</p><h3 id="3-Random-datetime-format"><a href="#3-Random-datetime-format" class="headerlink" title="3. Random.datetime([format])"></a>3. Random.datetime([format])</h3><p>返回一个随机的日期和时间字符串。</p><h5 id="format-2"><a href="#format-2" class="headerlink" title="format"></a>format</h5><p>可选属性。</p><p>表示生成的日期和时间字符串的格式。默认为<code>yyyy-MM-dd HH:mm:ss</code>。</p><p>详见Random.date([format])。</p><h3 id="4-Random-now-unit-format"><a href="#4-Random-now-unit-format" class="headerlink" title="4. Random.now([unit],[format])"></a>4. Random.now([unit],[format])</h3><p>返回当前的日期和时间字符串。</p><h5 id="unit"><a href="#unit" class="headerlink" title="unit"></a>unit</h5><p>可选。</p><p>表示时间单位，用于对当前日期和时间进行格式化。可选值有：<code>year</code>、<code>month</code>、<code>week</code>、<code>day</code>、<code>hour</code>、<code>minute</code>、<code>second</code>、<code>week</code>，默认不会格式化(日期单位从小至大进行格式化，格式化完unit定义的值后截止)，如下例：</p><blockquote><p>以下是来自官方文档中的例子,也许会不常使用。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Random.now()</span><br><span class="line">// =&gt; &quot;2014-04-29 20:08:38 &quot;</span><br><span class="line"></span><br><span class="line">// =&gt; &quot;2014-04-29 00:00:00 000&quot;</span><br><span class="line">Random.now(&apos;day&apos;)</span><br><span class="line">// =&gt; &quot;2014-04-29 00:00:00 &quot;</span><br><span class="line"></span><br><span class="line">Random.now(&apos;year&apos;)</span><br><span class="line">// =&gt; &quot;2014-01-01 00:00:00&quot;</span><br><span class="line"></span><br><span class="line">Random.now(&apos;month&apos;)</span><br><span class="line">// =&gt; &quot;2014-04-01 00:00:00&quot;</span><br><span class="line"></span><br><span class="line">Random.now(&apos;week&apos;)</span><br><span class="line">// =&gt; &quot;2014-04-27 00:00:00&quot;</span><br><span class="line"></span><br><span class="line">Random.now(&apos;day&apos;)</span><br><span class="line">// =&gt; &quot;2014-04-29 00:00:00&quot;</span><br><span class="line"></span><br><span class="line">Random.now(&apos;hour&apos;)</span><br><span class="line">// =&gt; &quot;2014-04-29 20:00:00&quot;</span><br><span class="line"></span><br><span class="line">Random.now(&apos;minute&apos;)</span><br><span class="line">// =&gt; &quot;2014-04-29 20:08:00&quot;</span><br><span class="line"></span><br><span class="line">Random.now(&apos;second&apos;)</span><br><span class="line">// =&gt; &quot;2014-04-29 20:08:38&quot;</span><br></pre></td></tr></table></figure><h5 id="format-3"><a href="#format-3" class="headerlink" title="format"></a>format</h5><p>可选属性。</p><p>表示生成的日期和时间字符串的格式。默认为<code>yyyy-MM-dd HH:mm:ss</code>。</p><p>详见Random.date([format])。</p><h2 id="2-Image"><a href="#2-Image" class="headerlink" title="2) Image"></a>2) Image</h2><h3 id="1-Random-image-size-background-foreground-format-text"><a href="#1-Random-image-size-background-foreground-format-text" class="headerlink" title="1.Random.image([size],[background],[foreground],[format],[text])"></a>1.Random.image([size],[background],[foreground],[format],[text])</h3><p>生成一个随机图片的网络地址。该图片高度会自适应</p><blockquote><p>在github上的mock官方文档中希望使用者在大多数情况下选择更简单的<br><a href="#randomdataimage">Random.dataImage()</a>。但在我的使用中dataImage会报错而且至今仍未解决掉。。。</p></blockquote><h5 id="Size"><a href="#Size" class="headerlink" title="Size"></a>Size</h5><p>可选属性。</p><p>指定图片的宽高，格式为<code>宽*高</code>。默认从下面的数组中随机选取一个，单位为px：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &apos;300x250&apos;, &apos;250x250&apos;, &apos;240x400&apos;, &apos;336x280&apos;, </span><br><span class="line">    &apos;180x150&apos;, &apos;720x300&apos;, &apos;468x60&apos;, &apos;234x60&apos;, </span><br><span class="line">    &apos;88x31&apos;, &apos;120x90&apos;, &apos;120x60&apos;, &apos;120x240&apos;, </span><br><span class="line">    &apos;125x125&apos;, &apos;728x90&apos;, &apos;160x600&apos;, &apos;120x600&apos;, </span><br><span class="line">    &apos;300x600&apos;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="background"><a href="#background" class="headerlink" title="background"></a>background</h5><p>可选属性。</p><p>指定图片的背景色。默认为<code>&#39;#000000&#39;</code>。</p><h5 id="foreground"><a href="#foreground" class="headerlink" title="foreground"></a>foreground</h5><p>可选属性。</p><p>指定图片的前景色（文字）。默认为<code>&#39;#FFFFFF&#39;</code>。（mock生成的图片上带有图片尺寸，如’250x250’，会显示在图片上，该属性就是改变图片上文字的字体颜色的）</p><h5 id="format-4"><a href="#format-4" class="headerlink" title="format"></a>format</h5><p>可选属性。</p><p>指定图片的格式。默认为<code>&#39;png&#39;</code>，可选值有<code>&#39;png&#39;</code>、<code>&#39;gif&#39;</code>、<code>&#39;jpg&#39;</code>。</p><h5 id="text"><a href="#text" class="headerlink" title="text"></a>text</h5><p>可选属性。</p><p>指定图片上的文字。默认为图片尺寸，如<code>&#39;250x250&#39;</code>，可任意定义一个字符串。</p><h3 id="2-Random-dataImage-size-text"><a href="#2-Random-dataImage-size-text" class="headerlink" title="2.Random.dataImage([size],[text])"></a>2.Random.dataImage([size],[text])</h3><p>生成一段随机图片的Base64图片编码。</p><h5 id="Size-1"><a href="#Size-1" class="headerlink" title="Size"></a>Size</h5><p>可选属性。</p><p>指定图片的宽高，格式为<code>宽*高</code>。详见Random.image([size])。</p><h5 id="text-1"><a href="#text-1" class="headerlink" title="text"></a>text</h5><p>可选属性。</p><p>指定图片上的文字。默认为图片尺寸，如<code>&#39;250x250&#39;</code>，可任意定义一个字符串。</p><h2 id="3-Color"><a href="#3-Color" class="headerlink" title="3) Color"></a>3) Color</h2><h3 id="1-Random-color"><a href="#1-Random-color" class="headerlink" title="1. Random.color()"></a>1. Random.color()</h3><p>生成一个随机颜色，格式为’#RRGGBB’。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random.color();</span><br><span class="line">// =&gt; &apos;#3538B2&apos;</span><br></pre></td></tr></table></figure><h3 id="2-Random-rgb"><a href="#2-Random-rgb" class="headerlink" title="2. Random.rgb()"></a>2. Random.rgb()</h3><p>生成一个随机颜色，格式为’rgb(r,g,b)’。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random.rgb();</span><br><span class="line">// =&gt; &apos;rgb(242,211,189)&apos;</span><br></pre></td></tr></table></figure><h3 id="3-Random-rgba"><a href="#3-Random-rgba" class="headerlink" title="3. Random.rgba()"></a>3. Random.rgba()</h3><p>生成一个随机颜色，格式为’rgb(r,g,b,a)’。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random.rgba();</span><br><span class="line">// =&gt; &apos;rgb(242,211,189,0.4)&apos;</span><br></pre></td></tr></table></figure><h2 id="4-Text"><a href="#4-Text" class="headerlink" title="4) Text"></a>4) Text</h2><h3 id="1-Random-paragraph-min-max"><a href="#1-Random-paragraph-min-max" class="headerlink" title="1.Random.paragraph([min],[max])"></a>1.Random.paragraph([min],[max])</h3><p>生成一段随机的文本。</p><h5 id="min-max"><a href="#min-max" class="headerlink" title="min,max"></a>min,max</h5><p>可选属性。</p><p>用来指定生成文本中句子的个数。</p><p>min 表示文本中句子的最小个数，默认值为3；max表示文本中句子的最大个数，默认值为7。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Random.paragraph()</span><br><span class="line">// =&gt; &quot;Yohbjjz psxwibxd jijiccj kvemj eidnus disnrst rcconm bcjrof tpzhdo ncxc yjws jnmdmty. Dkmiwza ibudbufrnh ndmcpz tomdyh oqoonsn jhoy rueieihtt vsrjpudcm sotfqsfyv mjeat shnqmslfo oirnzu cru qmpt ggvgxwv jbu kjde. Kzegfq kigj.&quot;</span><br><span class="line">    </span><br><span class="line">Random.paragraph(2)</span><br><span class="line">// =&gt; &quot;Dlpec hnwvovvnq slfehkf zimy qpxqgy vwrbi mok wozddpol umkek nffjcmk gnqhhvm ztqkvjm kvukg dqubvqn xqbmoda. Vdkceijr fhhyemx hgkruvxuvr kuez wmkfv lusfksuj oewvvf cyw tfpo jswpseupm ypybap kwbofwg uuwn rvoxti ydpeeerf.&quot;</span><br><span class="line">    </span><br><span class="line">Random.paragraph(1, 3)</span><br><span class="line">// =&gt; &quot;Qdgfqm puhxle twi lbeqjqfi bcxeeecu pqeqr srsx tjlnew oqtqx zhxhkvq pnjns eblxhzzta hifj csvndh ylechtyu.&quot;</span><br></pre></td></tr></table></figure><h3 id="2-Random-cParagraph-min-max"><a href="#2-Random-cParagraph-min-max" class="headerlink" title="2.Random.cParagraph([min],[max])"></a>2.Random.cParagraph([min],[max])</h3><p>生成一段随机的中文文本。</p><h5 id="min-max-1"><a href="#min-max-1" class="headerlink" title="min,max"></a>min,max</h5><p>详见Random.paragraph([min],[max])</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Random.cparagraph()</span><br><span class="line">// =&gt; &quot;给日数时化周作少情者美制论。到先争劳今已美变江以好较正新深。族国般建难出就金感基酸转。任部四那响成族利标铁导术一或已于。省元切世权往着路积会其区素白思断。加把他位间存定国工取除许热规先法方。&quot;</span><br><span class="line">    </span><br><span class="line">Random.cparagraph(2)</span><br><span class="line">// =&gt; &quot;去话起时为无子议气根复即传月广。题林里油步不约认山形两标命导社干。&quot;</span><br><span class="line">    </span><br><span class="line">Random.cparagraph(1, 3)</span><br><span class="line">// =&gt; &quot;候无部社心性有构员其深例矿取民为。须被亲需报每完认支这明复几下在铁需连。省备可离展五斗器就石正队除解动。&quot;</span><br></pre></td></tr></table></figure><h3 id="3-Random-sentence-min-max"><a href="#3-Random-sentence-min-max" class="headerlink" title="3. Random.sentence([min],[max])"></a>3. Random.sentence([min],[max])</h3><p>随机生成一个句子，第一个单词首字母大写。</p><h5 id="min-max-2"><a href="#min-max-2" class="headerlink" title="min,max"></a>min,max</h5><p>可选属性。</p><p>用来指定生成句子中单词的个数，默认为12到18之间的随机数。</p><p>min<br>表示句子中单词的最小个数，默认值为12；max表示句子中单词的最大个数，默认值为18。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Random.sentence()</span><br><span class="line">// =&gt; &quot;Jovasojt qopupwh plciewh dryir zsqsvlkga yeam.&quot;</span><br><span class="line">Random.sentence(5)</span><br><span class="line">// =&gt; &quot;Fwlymyyw htccsrgdk rgemfpyt cffydvvpc ycgvno.&quot;</span><br><span class="line">Random.sentence(3, 5)</span><br><span class="line">// =&gt; &quot;Mgl qhrprwkhb etvwfbixm jbqmg.&quot;</span><br></pre></td></tr></table></figure><h3 id="4-Random-cSentence-min-max"><a href="#4-Random-cSentence-min-max" class="headerlink" title="4. Random.cSentence([min],[max])"></a>4. Random.cSentence([min],[max])</h3><p>随机生成一个中文的句子。</p><p>参数值及默认值同 <code>Random.sentence(\[min\],\[max\])</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Random.csentence()</span><br><span class="line">// =&gt; &quot;第任人九同段形位第律认得。&quot;</span><br><span class="line">    </span><br><span class="line">Random.csentence(2)</span><br><span class="line">// =&gt; &quot;维总。&quot;</span><br><span class="line">    </span><br><span class="line">Random.csentence(1, 3)</span><br><span class="line">// =&gt; &quot;厂存。&quot;</span><br></pre></td></tr></table></figure><h3 id="5-Random-word-min-max"><a href="#5-Random-word-min-max" class="headerlink" title="5. Random.word([min],[max])"></a>5. Random.word([min],[max])</h3><p>随机生成一个单词。</p><h5 id="min-max-3"><a href="#min-max-3" class="headerlink" title="min,max"></a>min,max</h5><p>可选属性。</p><p>min 表示单词中字符的最小个数，默认值为3；max表示单词中字符的最大个数，默认值为7。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Random.word()</span><br><span class="line">// =&gt; &quot;fxpocl&quot;</span><br><span class="line">Random.word(5)</span><br><span class="line">// =&gt; &quot;xfqjb&quot;</span><br><span class="line">Random.word(3, 5)</span><br><span class="line">// =&gt; &quot;kemh&quot;</span><br></pre></td></tr></table></figure><h3 id="6-Random-cWord-pool-min-max"><a href="#6-Random-cWord-pool-min-max" class="headerlink" title="6. Random.cWord([pool],[min],[max])"></a>6. Random.cWord([pool],[min],[max])</h3><p>随机生成一个中文单词。</p><h5 id="pool"><a href="#pool" class="headerlink" title="pool"></a>pool</h5><p>可选属性</p><p>汉字字符串。表示汉字字符池，将从中选择一个汉字字符返回。</p><h5 id="min-max-4"><a href="#min-max-4" class="headerlink" title="min,max"></a>min,max</h5><p>参数值及默认值同 <code>Random.word(\[min\],\[max\])</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Random.cword()</span><br><span class="line">// =&gt; &quot;干&quot;</span><br><span class="line">Random.cword(&apos;零一二三四五六七八九十&apos;)</span><br><span class="line">// =&gt; &quot;六&quot;</span><br><span class="line">Random.cword(3)</span><br><span class="line">// =&gt; &quot;别金提&quot;</span><br><span class="line">Random.cword(&apos;零一二三四五六七八九十&apos;, 3)</span><br><span class="line">// =&gt; &quot;&quot;七七七&quot;&quot;</span><br><span class="line">Random.cword(5, 7)</span><br><span class="line">// =&gt; &quot;设过证全争听&quot;</span><br><span class="line">Random.cword(&apos;零一二三四五六七八九十&apos;, 5, 7)</span><br><span class="line">// =&gt; &quot;九七七零四&quot;</span><br></pre></td></tr></table></figure><h3 id="7-Random-title-min-max"><a href="#7-Random-title-min-max" class="headerlink" title="7. Random.title([min],[max])"></a>7. Random.title([min],[max])</h3><h5 id="min-max-5"><a href="#min-max-5" class="headerlink" title="min,max"></a>min,max</h5><p>可选属性。</p><p>随机生成一个标题，其中每个单词首字母大写。</p><p>min 表示标题中单词的最小个数，默认值为3；max表示标题中单词的最大个数，默认值为7。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Random.title()</span><br><span class="line">// =&gt; &quot;Rduqzr Muwlmmlg Siekwvo Ktn Nkl Orn&quot;</span><br><span class="line">Random.title(5)</span><br><span class="line">// =&gt; &quot;Ahknzf Btpehy Xmpc Gonehbnsm Mecfec&quot;</span><br><span class="line">Random.title(3, 5)</span><br><span class="line">// =&gt; &quot;Hvjexiondr Pyickubll Owlorjvzys Xfnfwbfk&quot;</span><br></pre></td></tr></table></figure><h3 id="8-Random-cTitle-min-max"><a href="#8-Random-cTitle-min-max" class="headerlink" title="8. Random.cTitle([min],[max])"></a>8. Random.cTitle([min],[max])</h3><h5 id="min-max-6"><a href="#min-max-6" class="headerlink" title="min,max"></a>min,max</h5><p>参数值及默认值同 <code>Random.title(\[min\],\[max\])</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Random.ctitle()</span><br><span class="line">// =&gt; &quot;证构动必作&quot;</span><br><span class="line">Random.ctitle(5)</span><br><span class="line">// =&gt; &quot;应青次影育&quot;</span><br><span class="line">Random.ctitle(3, 5)</span><br><span class="line">// =&gt; &quot;出料阶相&quot;</span><br></pre></td></tr></table></figure><h2 id="5-Name"><a href="#5-Name" class="headerlink" title="5) Name"></a>5) Name</h2><h3 id="1-Random-first"><a href="#1-Random-first" class="headerlink" title="1. Random.first()"></a>1. Random.first()</h3><p>随机生成一个常见的英文名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random.first()</span><br><span class="line">// =&gt; &quot;Nancy&quot;</span><br></pre></td></tr></table></figure><h2 id="2-Random-last"><a href="#2-Random-last" class="headerlink" title="2. Random.last()"></a>2. Random.last()</h2><p>随机生成一个常见的英文姓。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random.last()</span><br><span class="line">// =&gt; &quot;Martinez&quot;</span><br></pre></td></tr></table></figure><h2 id="3-Random-name-middle"><a href="#3-Random-name-middle" class="headerlink" title="3. Random.name([middle])"></a>3. Random.name([middle])</h2><p>随机生成一个常见的英文姓名。</p><h5 id="middle"><a href="#middle" class="headerlink" title="middle"></a>middle</h5><p>可选属性。</p><p>布尔值。指示是否生成中间名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Random.name()</span><br><span class="line">// =&gt; &quot;Larry Wilson&quot;</span><br><span class="line">Random.name(true)</span><br><span class="line">// =&gt; &quot;Helen Carol Martinez&quot;</span><br></pre></td></tr></table></figure><h2 id="4-Random-cfirst"><a href="#4-Random-cfirst" class="headerlink" title="4. Random.cfirst()"></a>4. Random.cfirst()</h2><p>随机生成一个常见的中文名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random.cfirst()</span><br><span class="line">// =&gt; &quot;曹&quot;</span><br></pre></td></tr></table></figure><h2 id="5-Random-clast"><a href="#5-Random-clast" class="headerlink" title="5. Random.clast()"></a>5. Random.clast()</h2><p>随机生成一个常见的中文姓。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random.clast()</span><br><span class="line">// =&gt; &quot;艳&quot;</span><br></pre></td></tr></table></figure><h2 id="6-Random-cname"><a href="#6-Random-cname" class="headerlink" title="6. Random.cname()"></a>6. Random.cname()</h2><p>随机生成一个常见的中文姓名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random.cname()</span><br><span class="line">// =&gt; &quot;袁军&quot;</span><br></pre></td></tr></table></figure><h2 id="6-Web"><a href="#6-Web" class="headerlink" title="6) Web"></a>6) Web</h2><h3 id="1-Random-url-protocol-host"><a href="#1-Random-url-protocol-host" class="headerlink" title="1. Random.url([protocol],[host])"></a>1. Random.url([protocol],[host])</h3><p>随机生成一个 URL。</p><h5 id="protocol"><a href="#protocol" class="headerlink" title="protocol"></a>protocol</h5><p>指定 URL 协议。例如 <code>http</code>。</p><h5 id="host"><a href="#host" class="headerlink" title="host"></a>host</h5><p>指定 URL 域名和端口号。例如 <code>nuysoft.com</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Random.url()</span><br><span class="line">// =&gt; &quot;mid://axmg.bg/bhyq&quot;</span><br><span class="line">Random.url(&apos;http&apos;)</span><br><span class="line">// =&gt; &quot;http://splap.yu/qxzkyoubp&quot;</span><br><span class="line">Random.url(&apos;http&apos;, &apos;nuysoft.com&apos;)</span><br><span class="line">// =&gt; &quot;http://nuysoft.com/ewacecjhe&quot;</span><br></pre></td></tr></table></figure><h3 id="2-Random-email-domain"><a href="#2-Random-email-domain" class="headerlink" title="2. Random.email([domain])"></a>2. Random.email([domain])</h3><p>随机生成一个邮件地址。</p><h5 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h5><p>可选属性。</p><p>指定邮件地址的域名。例如 <code>nuysoft.com</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Random.email()</span><br><span class="line">// =&gt; &quot;x.davis@jackson.edu&quot;</span><br><span class="line">Random.email(&apos;nuysoft.com&apos;)</span><br><span class="line">// =&gt; &quot;h.pqpneix@nuysoft.com&quot;</span><br></pre></td></tr></table></figure><h3 id="3-Random-ip"><a href="#3-Random-ip" class="headerlink" title="3. Random.ip()"></a>3. Random.ip()</h3><p>随机生成一个 IP 地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random.ip()</span><br><span class="line">// =&gt; &quot;34.206.109.169&quot;</span><br></pre></td></tr></table></figure><h2 id="7-Address"><a href="#7-Address" class="headerlink" title="7) Address"></a>7) Address</h2><h3 id="1-Random-region"><a href="#1-Random-region" class="headerlink" title="1. Random.region()"></a>1. Random.region()</h3><p>随机生成一个中国的大区。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random.region();</span><br><span class="line">// =&gt; &quot;华北&quot;</span><br></pre></td></tr></table></figure><h3 id="2-Random-province"><a href="#2-Random-province" class="headerlink" title="2. Random.province()"></a>2. Random.province()</h3><p>随机生成一个中国的省（或直辖市、自治区、特别行政区）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random.province();</span><br><span class="line">// =&gt; &quot;黑龙江省&quot;</span><br></pre></td></tr></table></figure><h3 id="3-Random-city-prefix"><a href="#3-Random-city-prefix" class="headerlink" title="3. Random.city([prefix])"></a>3. Random.city([prefix])</h3><p>随机生成一个中国的市。</p><h5 id="prefix"><a href="#prefix" class="headerlink" title="prefix"></a>prefix</h5><p>可选属性。</p><p>布尔值，表示是否生成所属的省。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Random.city()</span><br><span class="line">// =&gt; &quot;唐山市&quot;</span><br><span class="line">Random.city(true)</span><br><span class="line">// =&gt; &quot;山东省 济南市&quot;</span><br></pre></td></tr></table></figure><h3 id="4-Random-county-prefix"><a href="#4-Random-county-prefix" class="headerlink" title="4. Random.county([prefix])"></a>4. Random.county([prefix])</h3><p>随机生成一个中国的市。</p><h5 id="prefix-1"><a href="#prefix-1" class="headerlink" title="prefix"></a>prefix</h5><p>可选属性。</p><p>布尔值，表示是否生成所属的省、市。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Random.city()</span><br><span class="line">// =&gt; &quot;唐山市&quot;</span><br><span class="line">Random.city(true)</span><br><span class="line">// =&gt; &quot;甘肃省 白银市 会宁县&quot;</span><br></pre></td></tr></table></figure><h3 id="5-Random-zip"><a href="#5-Random-zip" class="headerlink" title="5. Random.zip()"></a>5. Random.zip()</h3><p>随机生成一个邮政编码（六位数字）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random.zip();</span><br><span class="line">// =&gt; &quot;100000&quot;</span><br></pre></td></tr></table></figure><h2 id="8-扩展方法"><a href="#8-扩展方法" class="headerlink" title="8) 扩展方法"></a>8) 扩展方法</h2><p><code>Mock.Random中的方法与</code>@占位符`相对应，在需要时还可以为Mock.Random扩展方法,与占位符使用规则相同。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Random.extend(&#123;</span><br><span class="line">    season: function(date) &#123;</span><br><span class="line">        var seasons = [&apos;春&apos;, &apos;夏&apos;, &apos;秋&apos;, &apos;冬&apos;]</span><br><span class="line">        return this.pick(seasons)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Random.season();</span><br><span class="line">// =&gt; &quot;春&quot;</span><br><span class="line">Mock.mock(&apos;@SEASON&apos;);</span><br><span class="line">// =&gt; &quot;冬&quot;</span><br><span class="line">Mock.mock(&#123;</span><br><span class="line">    season: &apos;@SEANSON&apos;;</span><br><span class="line">&#125;);</span><br><span class="line">// =&gt; &#123; season: &quot;秋&quot; &#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上所罗列的不是全部的规则，是我个人平时常用的一些。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue组件化开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue组件化开发 </tag>
            
            <tag> 前端假数据自测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elementUI各个组件在具体使用中的问题</title>
      <link href="/2019/09/10/elementUI%E5%90%84%E4%B8%AA%E7%BB%84%E4%BB%B6%E5%9C%A8%E5%85%B7%E4%BD%93%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/09/10/elementUI%E5%90%84%E4%B8%AA%E7%BB%84%E4%BB%B6%E5%9C%A8%E5%85%B7%E4%BD%93%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="一、elementUI-时间控件表单验证方法"><a href="#一、elementUI-时间控件表单验证方法" class="headerlink" title="一、elementUI 时间控件表单验证方法"></a>一、elementUI 时间控件表单验证方法</h2><blockquote><p>elementUI中的日期时间控件是挺不错的，日期选择的逻辑也还比较符合人们的正常习惯，但是该控件是一个标签生成两个input框的，在表单验证中无法使用required来验证是否非空。本篇文章是我采取的解决方法，也奏效了。可以作为参考。</p></blockquote><a id="more"></a><p>👇这是elementUI时间控件的HTML结构，</p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/15b80b33b4a0791ea69b66e02d2a9b2d?fid=1029729908-250528-250316389517524&time=1568710800&rt=sh&sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-vIYtOWw7t%2FURnoxBIdqSiRzAkJU%3D&expires=8h&chkv=0&chkbd=0&chkpc=&dp-logid=6023401648897520046&dp-callid=0&size=c710_u400&quality=100&vuk=-&ft=video" alt="img_01"></p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/6a6ba6fb65ed9ee2a49af2fbb4bfb048?fid=1029729908-250528-954367212124294&time=1568710800&rt=sh&sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-vQSJ4%2BjMPVzARoIx9q9BUp1HREE%3D&expires=8h&chkv=0&chkbd=0&chkpc=&dp-logid=6023458474264624317&dp-callid=0&size=c710_u400&quality=100&vuk=-&ft=video" alt="img_02"></p><p>这是在data return中定义的验证规则，validator属性调用自定义验证规则，此处为calidatorTime，该方法会自带三个参数 rule，value，callback；其中callback是方法，callback（）表示验证通过。callback（new Error（“此填写报错信息”））表示没有通过验证并提示错误信息.</p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/ebf34421134912fb59d23fbf6fcde109?fid=1029729908-250528-457333271463841&time=1568710800&rt=sh&sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-knlmb2JQ%2F89m1DXH8aGL2Pj5f2k%3D&expires=8h&chkv=0&chkbd=0&chkpc=&dp-logid=6023467139280889041&dp-callid=0&size=c710_u400&quality=100&vuk=-&ft=video" alt="img_03"></p><blockquote><p>自定义的validator验证规则方法需在data（）{}中以变量形式定义，</p></blockquote><p>尝试过在rules:[]规则中把validator作为其中一个属性，下面是一个网上的小例子，意在说明格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mobile:[&#123; </span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        message: <span class="string">'请输入手机号码'</span>,</span><br><span class="line">        trigger: <span class="string">'blur'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;<span class="attr">validator</span>:<span class="function"><span class="keyword">function</span>(<span class="params">rule,value,callback</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="regexp">/^1[34578]\d&#123;9&#125;$/</span>.test(value) == <span class="literal">false</span>)&#123;</span><br><span class="line">                callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"请输入正确的手机号"</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                callback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>也许是因为elementUI中这个日期时间控件是单标签渲染出两个input框的缘故（口误），这种写法不奏效，还是只能采用我最开始的那种写法。</p><p><img src="https://thumbnail0.baidupcs.com/thumbnail/1e48f3cdbc3c679e641b0a61e65bbc83?fid=1029729908-250528-855064877576754&time=1568710800&rt=sh&sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-J3%2FbNBwOt6%2BdcwcLUGFH1qqm1TE%3D&expires=8h&chkv=0&chkbd=0&chkpc=&dp-logid=6023417597685566742&dp-callid=0&size=c710_u400&quality=100&vuk=-&ft=video" alt="img_04"></p><blockquote><p>切记，如果有表单验证的页面，在类似提交或者保存功能的按钮的点击方法中嵌套一层以上代码，会在触发点击事件时进行表单验证，如果通过验证才能继续运行代码。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue组件化开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue组件化开发 </tag>
            
            <tag> elementUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多个axios如何进行同步请求</title>
      <link href="/2019/09/10/%E5%A4%9A%E4%B8%AAaxios%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%90%8C%E6%AD%A5%E8%AF%B7%E6%B1%82/"/>
      <url>/2019/09/10/%E5%A4%9A%E4%B8%AAaxios%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%90%8C%E6%AD%A5%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="多个axios如何进行同步请求"><a href="#多个axios如何进行同步请求" class="headerlink" title="多个axios如何进行同步请求"></a>多个axios如何进行同步请求</h2><blockquote><p>在我使用vue+axios进行开发的过程中，会碰到有两个异步请求，且其中一个请求需要另一个请求的返回值，那此时将两个异步的axios请求同步执行才是最好的方式。本文中整理了两种axios同步请求的方式。</p></blockquote><a id="more"></a><p>一、<br>    使用axios官方的axios.all()方法即可同步执行内部的多个异步axios操作。</p><pre><code>axiosReq1(params){                //将axios对象封装    this.axios.post(‘/login’,…{params});};axiosReq2(params){    this.axios.post(‘/register’,…{params});};······this.axios.all([axiosReq1(params),axiosReq2(params)…axiosReqX(params)]).then(function(res1,res2…resX){    console.log(res1,res1);    console.log(res2,res2);    ...    console.log(resX,resX);})</code></pre><p>二、<br>    因为axios是vue基于es6的promise语法对ajax进行的封装，每个axios.get/post()就是一个promise对象，即axios.()内部可使用promise语法的return对回调函数进行执行。（具体es6及promise对象请移步至其他博客进行了解😉）</p><pre><code>this.axios.get(&apos;/login&apos;)    .then((res) =&gt; {    if (res.status) {        ...        console.log(res);    };    return this.axios.get(&apos;/getDatas&apos;)；}).then((res)=&gt;{    if (res.status) {        console.log(res);    }})</code></pre>]]></content>
      
      
      <categories>
          
          <category> vue组件化开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue组件化开发 </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中变量的深浅拷贝</title>
      <link href="/2019/09/09/copy/"/>
      <url>/2019/09/09/copy/</url>
      
        <content type="html"><![CDATA[<!--<img src="../../../about_old.jpg" width="800px">--><!----><h2 id="js中-对象和数组的深浅拷贝"><a href="#js中-对象和数组的深浅拷贝" class="headerlink" title="js中 对象和数组的深浅拷贝"></a>js中 对象和数组的深浅拷贝</h2><blockquote><p>一般我们在将值从一个基本数据类型的变量赋值给另一个基本数据类型的变量时，简单的赋值即可实现，如：</p></blockquote><pre><code>var a = 1;var b = a;  // b:1   简单赋值b = 2；      //a:1,b:2   即使改变b的值，也不会影响a</code></pre><blockquote><p>这个简单的例子证明了基本数据类型的变量只需要简单赋值即可。但是在给对象和数组赋值的时候这种方法就不可行了，涉及到了深浅拷贝的问题，下面会介绍到。</p></blockquote><a id="more"></a><h3 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h3><p>js中有基本数据类型和引用（复杂）数据类型两种。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 其中：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（1） 基本数据类型: Number（数值）、String（字符串）、Boolean（布尔）、null、undefined、symbol（es6中出现的新类型，用于当作唯一标识，此处不过多赘述）。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（2） 引用数据类型: Object（对象）。</p><ol><li>基本数据类型的赋值<br>正如在文章开头说到的那样，基本数据类型用简单的 = 就能完成赋值。是因为简单数据类型在定义时，会在内存中重新开辟空间来存放新的变量，在内存之中存在着新旧两个变量的空间，互不影响。</li><li>引用数据类型的赋值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; <span class="comment">//arr1为数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = arr1;  <span class="comment">//将arr1的值赋给arr2，arr2:[1,2,3]</span></span><br><span class="line"></span><br><span class="line">arr2.push(<span class="number">4</span>);  <span class="comment">//改变arr2的值,</span></span><br><span class="line">               <span class="comment">//arr1:[1,2,3,4],arr1的值也被改变</span></span><br></pre></td></tr></table></figure><p>在此处arr1与arr2指向的是内存中的同一地址，知识赋值了地址。</p><p>因此，引用数据类型之间的赋值不能使用简单的复制，此处就涉及到了浅拷贝和深拷贝。</p><h3 id="二、深浅拷贝"><a href="#二、深浅拷贝" class="headerlink" title="二、深浅拷贝"></a>二、深浅拷贝</h3><p>在对象/数组中，浅拷贝只是复制了某个对象的指针，而不是对象本身。深拷贝则是创建一个和原对象一摸一样的对象，两个对象之间互不影响。</p><ol><li>浅拷贝</li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp; 浅拷贝只是对基本数据类型的拷贝。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = a; <span class="comment">//b:1</span></span><br><span class="line">b = <span class="number">2</span>; <span class="comment">//a:1,b:2</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp; 对于引用数据类型来说这样的简单赋值不可行，但如果 数组/对象 的 项/属性 也是基本数据类型，那么可以使用遍历的方式来进行赋值而两个数组/对象之间互不影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;arr1.length;i++)&#123;</span><br><span class="line">    arr2[i] = arr1[i];  <span class="comment">//arr1的每一项都是number基本数据类型，可以使用这样的方式进行赋值.</span></span><br><span class="line">&#125;  <span class="comment">//arr2:[1,2,3]</span></span><br><span class="line"></span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">4</span>; <span class="comment">//arr1:[1,2,3]</span></span><br><span class="line">             <span class="comment">//arr2:[4,2,3]</span></span><br><span class="line">             <span class="comment">//改变了arr2，arr1的值并没有改变</span></span><br></pre></td></tr></table></figure><ol start="2"><li>深拷贝<br>&nbsp;&nbsp;&nbsp;&nbsp; 如果是下面这种情况，简单的遍历赋值也无法实现深拷贝。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]];</span><br><span class="line"><span class="keyword">var</span> arr2 = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;arr1.length;i++)&#123;</span><br><span class="line">    arr2[i] = arr1[i];  </span><br><span class="line">&#125;  <span class="comment">//arr2:[1,2,[3,4]]</span></span><br><span class="line"></span><br><span class="line">arr2[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">5</span>; <span class="comment">//arr1:[1,2,[3,5]]</span></span><br><span class="line">             <span class="comment">//arr2:[1,2,[3,5]]</span></span><br><span class="line">             <span class="comment">//改变了arr2中引用数据类型项的值，arr1的值跟着改变了。</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(obj1).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"> obj2[key] = obj1[key];</span><br><span class="line">&#125;);  <span class="comment">//obj2:&#123;a:1,b:2,c:[1,2,3]&#125;</span></span><br><span class="line"></span><br><span class="line">obj2.c[<span class="number">0</span>] = <span class="number">4</span>; <span class="comment">//obj2:&#123;a:1,b:2,c:[4,2,3]&#125;</span></span><br><span class="line">             <span class="comment">//obj1:&#123;a:1,b:2,c:[4,2,3]&#125;</span></span><br><span class="line">             <span class="comment">//改变了obj2中引用数据类型项的值，obj1的值跟着改变了。</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>所以此时介绍两个起到深拷贝作用的方法：concat()、Object.assign()</p><blockquote><p>concat（）、Object.assign()方对用途不止如此，此处讨论深拷贝的方法，不对其他功能过多阐述</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1)concat()</p><blockquote><p>concat()方法用来对数组进行深拷贝操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [].concat(arr1);  <span class="comment">//arr2:[1,2,3]</span></span><br><span class="line"></span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">0</span>;  <span class="comment">//arr2 = [0,2,3]</span></span><br><span class="line">              <span class="comment">//arr1 = [1,2,3]  arr1并未受到影响</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (2)$.extend()</p><blockquote><p>Object.assign()方法用来对对象进行深拷贝操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;,obj1);  <span class="comment">//obj2:&#123;a:1,b:2,c:[1,2,3]&#125;</span></span><br><span class="line"></span><br><span class="line">obj2.c[<span class="number">0</span>] = <span class="number">0</span>;  <span class="comment">//obj2:&#123;a:1,b:2,c:[0,2,3]&#125;</span></span><br><span class="line">              <span class="comment">//obj1:&#123;a:1,b:2,c:[1,2,3]&#125;  obj1并未受到影响</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
            <tag> 深浅拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js对数组的一些操作方法</title>
      <link href="/2019/09/05/Js%20Array%20and%20String/"/>
      <url>/2019/09/05/Js%20Array%20and%20String/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍js中对数组和字符串的基本操作</p></blockquote><h2 id="一-数组操作"><a href="#一-数组操作" class="headerlink" title="一. 数组操作"></a>一. 数组操作</h2><blockquote><p>  概念</p></blockquote><p>数组操作分为两类:</p><ol><li><p>会改变原数组的方法: .push(), .pop(), .shift(), .unshift(), .splice(), .reverse(), .sort();</p></li><li><p>不会改变原数组的方法: .concat(), .slice(), .join()。</p></li></ol><h2 id="1）改变原数组的操作"><a href="#1）改变原数组的操作" class="headerlink" title="1）改变原数组的操作"></a>1）改变原数组的操作</h2><h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><p>push()方法可向数组的末尾添加一个或多个元素，并返回新的长度。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">arr.push([<span class="number">7</span>,<span class="number">8</span>]);  <span class="comment">//arr:[1,2,3,4,5,6,[7,8]]</span></span><br><span class="line">                  <span class="comment">//如果插入的为数组，则插入的这个数组成为arr的最后一项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> count = arr.push(<span class="number">9</span>,<span class="number">10</span>);   <span class="comment">//arr:[1,2,3,4,5,6,[7,8],9,10]</span></span><br><span class="line">                              <span class="comment">//count:9  ==  返回值为改变后数组的长度</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p>pop()方法用于删除数组的最后一个元素，并返回被删除的元素。</p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> item = arr.pop();   <span class="comment">//arr:[1,2,3,4,5]</span></span><br><span class="line">                        <span class="comment">//item:6  ==  返回值为被删除的元素</span></span><br></pre></td></tr></table></figure><h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><p>shif()方法用于把数组的第一个元素从其中删除，并返回第一个元素的值.</p><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> item = arr.shift();     <span class="comment">//arr:[2,3,4,5,6]</span></span><br><span class="line">                            <span class="comment">//item:1  ==  返回值为被删除的元素</span></span><br></pre></td></tr></table></figure><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><p>unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度.</p><h4 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> count = arr.unshift(<span class="number">1</span>,<span class="number">2</span>);   <span class="comment">//arr:[1,2,1,2,3,4,5,6]</span></span><br><span class="line">                                <span class="comment">//count:8   ==  返回数组的长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> count = arr.unshift([<span class="number">1</span>,<span class="number">2</span>]);     <span class="comment">//arr:[[1,2],1,2,1,2,3,4,5,6]</span></span><br><span class="line">                                    <span class="comment">//count:9</span></span><br></pre></td></tr></table></figure><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><p>splice() 方法向数组中添加项目(或 向数组中添加项目)，然后返回被删除的项目，返回值为数组。</p><p><strong>一句话概括一下：此方法不是单纯的添加或者删除数组中的项，更像是更改数组。从索引为index的项开始（包括index项）往后面找个数length的项，将他们替换为item1…itemX</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：arrayObject.splice(index,length,item1,.....,itemX)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">index</td><td align="center">必填。规定添加（删除）的位置。即从索引为index的项为起点。如果为负数则从倒数项开始。</td></tr><tr><td align="center">length</td><td align="center">必填。规定删除的项的个数，如果为0则不删除。</td></tr><tr><td align="center">item1…itemX</td><td align="center">选填。规定添加的项。如果有item1…itemX，则不论是否删除，item1…itemX都会添加到数组。</td></tr></tbody></table><h4 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4,5,6];</span><br><span class="line"></span><br><span class="line">var items = arr.splice(5,1);   //arr:[1,2,3,4,5]    此用法表现为删除操作</span><br><span class="line">                                //items:[6]     返回被删除的项</span><br><span class="line"></span><br><span class="line">var items = arr.splice(4,1,7,8,9);     //arr:[1,2,3,4,7,8,9]    此用法表现为更改操作。从第index为4的项开始的1项删除，并插入 7，8，9</span><br><span class="line">                                    //count:[5]     返回被删除的项</span><br></pre></td></tr></table></figure><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><p>reverse() 方法用于颠倒数组中元素的顺序，无返回值。</p><h4 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [a,b,c,d];</span><br><span class="line"></span><br><span class="line">arr.reverse();   <span class="comment">//arr:[d,c,b,a]</span></span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>sort() 方法用于对数组的元素进行排序，无返回值。</p><h4 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">arr.sort();   <span class="comment">//arr:[1,2,3,4,5]     完成排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//但是注意，该方法仅用于对数组项为单纯数字的数组进行排序，如果数组的项为字符串，结果可能不为预期</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> strArr = [<span class="string">'1'</span>,<span class="string">'12'</span>,<span class="string">'2'</span>,<span class="string">'5'</span>,<span class="string">'300'</span>];</span><br><span class="line"></span><br><span class="line">strArr.sort();      <span class="comment">//strArr:['1','12','2','300','5']</span></span><br></pre></td></tr></table></figure><h2 id="2）不会改变原数组的操作"><a href="#2）不会改变原数组的操作" class="headerlink" title="2）不会改变原数组的操作"></a>2）不会改变原数组的操作</h2><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p>concat() 方法用于两个或多个数组的拼接,返回值为拼接后的新数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法： arr1.concat(arr2,arr3...arrX);  其中arr2...arrX可以是具体的项</span><br></pre></td></tr></table></figure><h4 id="例子-7"><a href="#例子-7" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.concat(<span class="number">4</span>,<span class="number">5</span>);    <span class="comment">//arr2 = [1,2,3,4,5]</span></span><br><span class="line"><span class="keyword">var</span> arr3 = arr1.concat([<span class="number">4</span>,<span class="number">5</span>]);  <span class="comment">//arr3 = [1,2,3,4,5]</span></span><br><span class="line">                                <span class="comment">//arr1 = [1,2,3]    --    不改变原数组</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp; 以上两个操作拼接的为不同对象，但结果是一样的，由此看出concat()方法返回值有且只有一个数组。如果传入参数为数组，会将数组的每个项拆分再进行拼接操作。</p><blockquote><p><strong>*tips</strong>:因concat()不会改变任何数组就能复制出一个与原数组一摸一样的数组，所以多用来对数组进行深拷贝操作</p></blockquote><pre><code>var arr1 = [1,2,3];var arr2 = [].concat(arr1);     //将arr1的值与空数组拼接，意在将arr1的值复制一份。</code></pre><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p>slice() 方法用于返回一个数组的选定元素,并存放在一个新数组中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法： arr.slice(start,end);</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">start</td><td align="center">必填。用来指定选取的起点，从索引为start的项开始。</td></tr><tr><td align="center">end</td><td align="center">选填。用来指定选取的终点，选取到索引为end的项的前一项，不包括索引为end的项本身。如不填，则选取到数组的最后一位。</td></tr></tbody></table><h4 id="例子-8"><a href="#例子-8" class="headerlink" title="例子"></a>例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr1 = [1,2,3,4,5,6];</span><br><span class="line"></span><br><span class="line">var arr2 = arr1.slice(1);</span><br><span class="line">//arr2:[2,3,4,5,6]</span><br><span class="line">var arr3 = arr1.slice(2,4);</span><br><span class="line">//arr3 = [3,4]</span><br></pre></td></tr></table></figure><h2 id="2-字符串操作"><a href="#2-字符串操作" class="headerlink" title="2. 字符串操作"></a>2. 字符串操作</h2><blockquote><p>  概念</p></blockquote><p>数组操作分为两类:</p><ol><li><p>会改变原数组的方法: .push(), .pop(), .shift(), .unshift(), .splice(), .reverse(), .sort();</p></li><li><p>不会改变原数组的方法: .concat(), .slice()。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js数组 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
